import controllerwrapper
import trafficlightwrapper
import monitorwrapper
import pedestrianlightwrapper

package crossroad

async Crossroad [
	// Component ports
	port police : requires PoliceInterrupt,
	port priorityAOutput : provides LightCommands,
	port secondaryAOutput : provides LightCommands,
	port pedestrianAOutput: provides LightCommands,
	port priorityBOutput : provides LightCommands,
	port secondaryBOutput : provides LightCommands,
	port pedestrianBOutput: provides LightCommands
] {
	// Components of the composite model
	component controller : ControllerWrapper
	component priorA : TrafficLightWrapper
	component secondaryA : TrafficLightWrapper
	component pedestrianA: PedestrianLightWrapper
	component priorB : TrafficLightWrapper
	component secondaryB : TrafficLightWrapper
	component pedestrianB: PedestrianLightWrapper
	component monitor : MonitorWrapper
	
	// Binding system ports to the ports of the components	
	bind police -> controller.PoliceInterrupt
	bind priorityAOutput -> priorA.LightCommands
	bind secondaryAOutput -> secondaryA.LightCommands
	bind pedestrianAOutput -> pedestrianA.LightCommands
	bind priorityBOutput -> priorB.LightCommands
	bind secondaryBOutput -> secondaryB.LightCommands
	bind pedestrianBOutput -> pedestrianB.LightCommands
	
	// Connecting ports of components using channels
	channel [controller.PriorityControl] -o)- [priorA.Control,priorB.Control]
	channel [controller.SecondaryControl] -o)- [secondaryA.Control,secondaryB.Control]
	channel [controller.PedestrianControl] -o)- [pedestrianA.Control,pedestrianB.Control]
	
	channel [controller.PriorityPolice] -o)- [priorA.PoliceInterrupt,priorB.PoliceInterrupt]
	channel [controller.SecondaryPolice] -o)- [secondaryA.PoliceInterrupt,secondaryB.PoliceInterrupt]
	channel [controller.PedestrianPolice] -o)- [pedestrianA.PoliceInterrupt,pedestrianB.PoliceInterrupt]
	
	channel [monitor.ErrorOut] -o)- [controller.Error]
}